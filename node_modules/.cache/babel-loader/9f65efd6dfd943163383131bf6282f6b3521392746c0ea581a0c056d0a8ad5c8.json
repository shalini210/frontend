{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route,Navigate}from'react-router-dom';import Header from'./components/Header';import Dashboard from'./components/Dashboard';import ContactList from'./components/Contacts/ContactList';import TaskManager from'./components/Tasks/TaskManager';import Settings from'./components/Settings';import SignIn from'./components/SignIn';// Import the SignIn component\nimport'./App.css';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const App=()=>{const[isAuthenticated,setIsAuthenticated]=useState(false);// Check authentication status from localStorage on initial load\nuseEffect(()=>{const authState=JSON.parse(localStorage.getItem('isAuthenticated'));if(authState){setIsAuthenticated(true);}},[]);// Handle logging out\nconst handleLogout=()=>{localStorage.removeItem('isAuthenticated');// Remove authentication state\nsetIsAuthenticated(false);// Update local state\n};return/*#__PURE__*/_jsxs(Router,{children:[isAuthenticated&&/*#__PURE__*/_jsx(Header,{onLogout:handleLogout}),\" \",/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/signin\",element:isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\"}):/*#__PURE__*/_jsx(SignIn,{setIsAuthenticated:setIsAuthenticated})}),isAuthenticated?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Route,{path:\"/dashboard\",element:/*#__PURE__*/_jsx(Dashboard,{})}),/*#__PURE__*/_jsx(Route,{path:\"/contacts\",element:/*#__PURE__*/_jsx(ContactList,{})}),/*#__PURE__*/_jsx(Route,{path:\"/tasks\",element:/*#__PURE__*/_jsx(TaskManager,{})}),/*#__PURE__*/_jsx(Route,{path:\"/settings\",element:/*#__PURE__*/_jsx(Settings,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\"})}),\" \"]}):/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/signin\"})})// Redirect all unauthenticated users to Sign-In\n]})})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","Header","Dashboard","ContactList","TaskManager","Settings","SignIn","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","App","isAuthenticated","setIsAuthenticated","authState","JSON","parse","localStorage","getItem","handleLogout","removeItem","children","onLogout","className","path","element","to"],"sources":["C:/Users/Admin/crm-project/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Dashboard from './components/Dashboard';\r\nimport ContactList from './components/Contacts/ContactList';\r\nimport TaskManager from './components/Tasks/TaskManager';\r\nimport Settings from './components/Settings';\r\nimport SignIn from './components/SignIn'; // Import the SignIn component\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Check authentication status from localStorage on initial load\r\n  useEffect(() => {\r\n    const authState = JSON.parse(localStorage.getItem('isAuthenticated'));\r\n    if (authState) {\r\n      setIsAuthenticated(true);\r\n    }\r\n  }, []);\r\n\r\n  // Handle logging out\r\n  const handleLogout = () => {\r\n    localStorage.removeItem('isAuthenticated'); // Remove authentication state\r\n    setIsAuthenticated(false); // Update local state\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      {isAuthenticated && <Header onLogout={handleLogout} />} {/* Show Header only if authenticated */}\r\n      <div className=\"container\">\r\n        <Routes>\r\n          {/* If user is authenticated, redirect from /signin to /dashboard */}\r\n          <Route\r\n            path=\"/signin\"\r\n            element={isAuthenticated ? <Navigate to=\"/dashboard\" /> : <SignIn setIsAuthenticated={setIsAuthenticated} />}\r\n          />\r\n\r\n          {/* Protected routes for authenticated users */}\r\n          {isAuthenticated ? (\r\n            <>\r\n              <Route path=\"/dashboard\" element={<Dashboard />} />\r\n              <Route path=\"/contacts\" element={<ContactList />} />\r\n              <Route path=\"/tasks\" element={<TaskManager />} />\r\n              <Route path=\"/settings\" element={<Settings />} />\r\n              <Route path=\"/\" element={<Navigate to=\"/dashboard\" />} /> {/* Default redirect to dashboard */}\r\n            </>\r\n          ) : (\r\n            <Route path=\"*\" element={<Navigate to=\"/signin\" />} /> // Redirect all unauthenticated users to Sign-In\r\n          )}\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}