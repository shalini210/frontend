{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\crm-project\\\\frontend\\\\src\\\\components\\\\Tasks\\\\TaskManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport AddTaskModal from './AddTaskModal';\nimport TaskList from './TaskList';\nimport './TaskManager.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editTask, setEditTask] = useState(null);\n\n  // Fetch tasks from API on component mount\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/tasks');\n        setTasks(response.data);\n      } catch (error) {\n        console.error('Failed to fetch tasks:', error);\n      }\n    };\n    fetchTasks();\n  }, []);\n\n  // Add or update task\n  const addOrUpdateTask = async task => {\n    try {\n      if (editTask) {\n        // Update task\n        const updatedTask = await axios.put(`http://localhost:5000/api/tasks/${editTask._id}`, task);\n        setTasks(prevTasks => prevTasks.map(t => t._id === editTask._id ? updatedTask.data : t));\n        setEditTask(null);\n      } else {\n        // Add new task\n        const addedTask = await axios.post('http://localhost:5000/api/tasks', task);\n        setTasks(prevTasks => [...prevTasks, addedTask.data]);\n      }\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error('Failed to save task:', error);\n    }\n  };\n\n  // Open modal to edit a task or add a new task\n  const openModal = (task = null) => {\n    setEditTask(task);\n    setIsModalOpen(true);\n  };\n\n  // Delete task\n  const deleteTask = async taskId => {\n    try {\n      await axios.delete(`http://localhost:5000/api/tasks/${taskId}`);\n      setTasks(prevTasks => prevTasks.filter(task => task._id !== taskId));\n    } catch (error) {\n      console.error('Failed to delete task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-task-button\",\n      onClick: () => {\n        console.log('Add Task button clicked'); // Log when the button is clicked\n        openModal();\n      },\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onEdit: openModal,\n      onDelete: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(AddTaskModal, {\n      onAddTask: addOrUpdateTask,\n      onClose: () => setIsModalOpen(false),\n      task: editTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskManager, \"l0QxVmgdFFn9u5tbGcSYvWbDYuk=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","AddTaskModal","TaskList","jsxDEV","_jsxDEV","TaskManager","_s","tasks","setTasks","isModalOpen","setIsModalOpen","editTask","setEditTask","fetchTasks","response","get","data","error","console","addOrUpdateTask","task","updatedTask","put","_id","prevTasks","map","t","addedTask","post","openModal","deleteTask","taskId","delete","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","log","onEdit","onDelete","onAddTask","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Admin/crm-project/frontend/src/components/Tasks/TaskManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport AddTaskModal from './AddTaskModal';\r\nimport TaskList from './TaskList';\r\nimport './TaskManager.css';\r\n\r\nconst TaskManager = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editTask, setEditTask] = useState(null);\r\n\r\n  // Fetch tasks from API on component mount\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/tasks');\r\n        setTasks(response.data);\r\n      } catch (error) {\r\n        console.error('Failed to fetch tasks:', error);\r\n      }\r\n    };\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  // Add or update task\r\n  const addOrUpdateTask = async (task) => {\r\n    try {\r\n      if (editTask) {\r\n        // Update task\r\n        const updatedTask = await axios.put(\r\n          `http://localhost:5000/api/tasks/${editTask._id}`,\r\n          task\r\n        );\r\n        setTasks((prevTasks) =>\r\n          prevTasks.map((t) => (t._id === editTask._id ? updatedTask.data : t))\r\n        );\r\n        setEditTask(null);\r\n      } else {\r\n        // Add new task\r\n        const addedTask = await axios.post('http://localhost:5000/api/tasks', task);\r\n        setTasks((prevTasks) => [...prevTasks, addedTask.data]);\r\n      }\r\n      setIsModalOpen(false);\r\n    } catch (error) {\r\n      console.error('Failed to save task:', error);\r\n    }\r\n  };\r\n\r\n  // Open modal to edit a task or add a new task\r\n  const openModal = (task = null) => {\r\n    setEditTask(task);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  // Delete task\r\n  const deleteTask = async (taskId) => {\r\n    try {\r\n      await axios.delete(`http://localhost:5000/api/tasks/${taskId}`);\r\n      setTasks((prevTasks) => prevTasks.filter((task) => task._id !== taskId));\r\n    } catch (error) {\r\n      console.error('Failed to delete task:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-manager\">\r\n      <h1>Task Manager</h1>\r\n      <button className=\"add-task-button\" onClick={() => { \r\n      console.log('Add Task button clicked'); // Log when the button is clicked\r\n      openModal();\r\n  }}>\r\n  Add Task\r\n</button>\r\n\r\n      <TaskList tasks={tasks} onEdit={openModal} onDelete={deleteTask} />\r\n      {isModalOpen && (\r\n        <AddTaskModal\r\n          onAddTask={addOrUpdateTask}\r\n          onClose={() => setIsModalOpen(false)}\r\n          task={editTask}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskManager;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMc,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,iCAAiC,CAAC;QACnEP,QAAQ,CAACM,QAAQ,CAACE,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IACDJ,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,eAAe,GAAG,MAAOC,IAAI,IAAK;IACtC,IAAI;MACF,IAAIT,QAAQ,EAAE;QACZ;QACA,MAAMU,WAAW,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CACjC,mCAAmCX,QAAQ,CAACY,GAAG,EAAE,EACjDH,IACF,CAAC;QACDZ,QAAQ,CAAEgB,SAAS,IACjBA,SAAS,CAACC,GAAG,CAAEC,CAAC,IAAMA,CAAC,CAACH,GAAG,KAAKZ,QAAQ,CAACY,GAAG,GAAGF,WAAW,CAACL,IAAI,GAAGU,CAAE,CACtE,CAAC;QACDd,WAAW,CAAC,IAAI,CAAC;MACnB,CAAC,MAAM;QACL;QACA,MAAMe,SAAS,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,iCAAiC,EAAER,IAAI,CAAC;QAC3EZ,QAAQ,CAAEgB,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEG,SAAS,CAACX,IAAI,CAAC,CAAC;MACzD;MACAN,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMY,SAAS,GAAGA,CAACT,IAAI,GAAG,IAAI,KAAK;IACjCR,WAAW,CAACQ,IAAI,CAAC;IACjBV,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMoB,UAAU,GAAG,MAAOC,MAAM,IAAK;IACnC,IAAI;MACF,MAAM/B,KAAK,CAACgC,MAAM,CAAC,mCAAmCD,MAAM,EAAE,CAAC;MAC/DvB,QAAQ,CAAEgB,SAAS,IAAKA,SAAS,CAACS,MAAM,CAAEb,IAAI,IAAKA,IAAI,CAACG,GAAG,KAAKQ,MAAM,CAAC,CAAC;IAC1E,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACEb,OAAA;IAAK8B,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3B/B,OAAA;MAAA+B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBnC,OAAA;MAAQ8B,SAAS,EAAC,iBAAiB;MAACM,OAAO,EAAEA,CAAA,KAAM;QACnDtB,OAAO,CAACuB,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC;QACxCZ,SAAS,CAAC,CAAC;MACf,CAAE;MAAAM,QAAA,EAAC;IAEL;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEHnC,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA,KAAM;MAACmC,MAAM,EAAEb,SAAU;MAACc,QAAQ,EAAEb;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClE9B,WAAW,iBACVL,OAAA,CAACH,YAAY;MACX2C,SAAS,EAAEzB,eAAgB;MAC3B0B,OAAO,EAAEA,CAAA,KAAMnC,cAAc,CAAC,KAAK,CAAE;MACrCU,IAAI,EAAET;IAAS;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACjC,EAAA,CA9EID,WAAW;AAAAyC,EAAA,GAAXzC,WAAW;AAgFjB,eAAeA,WAAW;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}