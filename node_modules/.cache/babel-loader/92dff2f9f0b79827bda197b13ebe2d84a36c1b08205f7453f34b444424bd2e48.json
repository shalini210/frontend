{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\crm-project\\\\frontend\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Dashboard.css';\nimport { getContacts } from '../api/contactApi'; // API function to fetch contacts\nimport { getTasks } from '../api/taskApi'; // API function to fetch tasks\nimport { Bar } from 'react-chartjs-2'; // Import the Bar chart component from react-chartjs-2\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js'; // Import chart.js components\n\n// Register chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  const [totalContacts, setTotalContacts] = useState(0);\n  const [upcomingTasks, setUpcomingTasks] = useState([]);\n  const [leadCount, setLeadCount] = useState(0);\n  const [contactCount, setContactCount] = useState(0);\n  const [taskStatusCounts, setTaskStatusCounts] = useState({\n    pending: 0,\n    inProgress: 0,\n    completed: 0\n  });\n\n  // Fetch data when the component loads\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch contacts\n        const contacts = await getContacts();\n        setTotalContacts(contacts.length);\n\n        // Count leads and contacts based on the 'type'\n        const leads = contacts.filter(contact => contact.type === 'lead');\n        const contactsCount = contacts.filter(contact => contact.type === 'contact');\n        setLeadCount(leads.length);\n        setContactCount(contactsCount.length);\n\n        // Fetch tasks\n        const tasks = await getTasks();\n        const upcoming = tasks.filter(task => new Date(task.dueDate) > new Date() // Filter tasks due in the future\n        );\n        setUpcomingTasks(upcoming.slice(0, 5)); // Show only the next 5 tasks\n\n        // Count task statuses\n        const statusCounts = tasks.reduce((acc, task) => {\n          if (task.status === 'Pending') acc.pending++;else if (task.status === 'In Progress') acc.inProgress++;else if (task.status === 'Completed') acc.completed++;\n          return acc;\n        }, {\n          pending: 0,\n          inProgress: 0,\n          completed: 0\n        });\n        setTaskStatusCounts(statusCounts);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []); // This effect runs only once when the component mounts\n\n  // Data for the lead vs contact ratio chart\n  const leadContactChartData = {\n    labels: ['Leads', 'Contacts'],\n    datasets: [{\n      label: 'Leads vs Contacts',\n      data: [leadCount, contactCount],\n      // Update with dynamic lead and contact counts\n      backgroundColor: ['#4CAF50', '#FF5722'],\n      // Different colors for leads and contacts\n      borderColor: ['#388E3C', '#D32F2F'],\n      borderWidth: 1\n    }]\n  };\n\n  // Data for task status chart\n  const taskStatusChartData = {\n    labels: ['Pending', 'In Progress', 'Completed'],\n    datasets: [{\n      label: 'Task Status',\n      data: [taskStatusCounts.pending, taskStatusCounts.inProgress, taskStatusCounts.completed],\n      // Update with dynamic task status counts\n      backgroundColor: ['#FF9800', '#2196F3', '#4CAF50'],\n      // Different colors for each status\n      borderColor: ['#F57C00', '#1976D2', '#388E3C'],\n      borderWidth: 1\n    }]\n  };\n\n  // Options for the charts\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    // Ensures the size does not change when data updates\n    plugins: {\n      title: {\n        display: true,\n        text: 'Lead vs Contact Ratio'\n      },\n      tooltip: {\n        enabled: true\n      }\n    },\n    scales: {\n      x: {\n        ticks: {\n          display: false // Hide the numbers on the x-axis\n        }\n      },\n      y: {\n        ticks: {\n          display: false // Hide the numbers on the y-axis\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Your CRM Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Total Contacts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: totalContacts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stat\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upcoming Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), upcomingTasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: upcomingTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [task.title, \" - Due \", new Date(task.dueDate).toLocaleDateString()]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No upcoming tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"charts\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Lead vs Contact Ratio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: leadContactChartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Task Status Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: taskStatusChartData,\n          options: chartOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"qQ/9ewtGIzezW0RzlfvJs0gd3SA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","getContacts","getTasks","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","totalContacts","setTotalContacts","upcomingTasks","setUpcomingTasks","leadCount","setLeadCount","contactCount","setContactCount","taskStatusCounts","setTaskStatusCounts","pending","inProgress","completed","fetchData","contacts","length","leads","filter","contact","type","contactsCount","tasks","upcoming","task","Date","dueDate","slice","statusCounts","reduce","acc","status","error","console","leadContactChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","taskStatusChartData","chartOptions","responsive","maintainAspectRatio","plugins","title","display","text","tooltip","enabled","scales","x","ticks","y","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","toLocaleDateString","options","_c","$RefreshReg$"],"sources":["C:/Users/Admin/crm-project/frontend/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Dashboard.css';\r\nimport { getContacts } from '../api/contactApi'; // API function to fetch contacts\r\nimport { getTasks } from '../api/taskApi'; // API function to fetch tasks\r\nimport { Bar } from 'react-chartjs-2'; // Import the Bar chart component from react-chartjs-2\r\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js'; // Import chart.js components\r\n\r\n// Register chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [totalContacts, setTotalContacts] = useState(0);\r\n  const [upcomingTasks, setUpcomingTasks] = useState([]);\r\n  const [leadCount, setLeadCount] = useState(0);\r\n  const [contactCount, setContactCount] = useState(0);\r\n  const [taskStatusCounts, setTaskStatusCounts] = useState({ pending: 0, inProgress: 0, completed: 0 });\r\n\r\n  // Fetch data when the component loads\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Fetch contacts\r\n        const contacts = await getContacts();\r\n        setTotalContacts(contacts.length);\r\n\r\n        // Count leads and contacts based on the 'type'\r\n        const leads = contacts.filter(contact => contact.type === 'lead');\r\n        const contactsCount = contacts.filter(contact => contact.type === 'contact');\r\n        setLeadCount(leads.length);\r\n        setContactCount(contactsCount.length);\r\n\r\n        // Fetch tasks\r\n        const tasks = await getTasks();\r\n        const upcoming = tasks.filter(\r\n          (task) => new Date(task.dueDate) > new Date() // Filter tasks due in the future\r\n        );\r\n        setUpcomingTasks(upcoming.slice(0, 5)); // Show only the next 5 tasks\r\n\r\n        // Count task statuses\r\n        const statusCounts = tasks.reduce(\r\n          (acc, task) => {\r\n            if (task.status === 'Pending') acc.pending++;\r\n            else if (task.status === 'In Progress') acc.inProgress++;\r\n            else if (task.status === 'Completed') acc.completed++;\r\n            return acc;\r\n          },\r\n          { pending: 0, inProgress: 0, completed: 0 }\r\n        );\r\n        setTaskStatusCounts(statusCounts);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []); // This effect runs only once when the component mounts\r\n\r\n  // Data for the lead vs contact ratio chart\r\n  const leadContactChartData = {\r\n    labels: ['Leads', 'Contacts'],\r\n    datasets: [\r\n      {\r\n        label: 'Leads vs Contacts',\r\n        data: [leadCount, contactCount], // Update with dynamic lead and contact counts\r\n        backgroundColor: ['#4CAF50', '#FF5722'], // Different colors for leads and contacts\r\n        borderColor: ['#388E3C', '#D32F2F'],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Data for task status chart\r\n  const taskStatusChartData = {\r\n    labels: ['Pending', 'In Progress', 'Completed'],\r\n    datasets: [\r\n      {\r\n        label: 'Task Status',\r\n        data: [taskStatusCounts.pending, taskStatusCounts.inProgress, taskStatusCounts.completed], // Update with dynamic task status counts\r\n        backgroundColor: ['#FF9800', '#2196F3', '#4CAF50'], // Different colors for each status\r\n        borderColor: ['#F57C00', '#1976D2', '#388E3C'],\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Options for the charts\r\n  const chartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,  // Ensures the size does not change when data updates\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: 'Lead vs Contact Ratio',\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n      },\r\n    },\r\n    scales: {\r\n      x: {\r\n        ticks: {\r\n          display: false, // Hide the numbers on the x-axis\r\n        },\r\n      },\r\n      y: {\r\n        ticks: {\r\n          display: false, // Hide the numbers on the y-axis\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <h1>Welcome to Your CRM Dashboard</h1>\r\n      <div className=\"stats\">\r\n        <div className=\"stat\">\r\n          <h2>Total Contacts</h2>\r\n          <p>{totalContacts}</p>\r\n        </div>\r\n        <div className=\"stat\">\r\n          <h2>Upcoming Tasks</h2>\r\n          {upcomingTasks.length > 0 ? (\r\n            <ul>\r\n              {upcomingTasks.map((task, index) => (\r\n                <li key={index}>\r\n                  {task.title} - Due {new Date(task.dueDate).toLocaleDateString()}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>No upcoming tasks</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Bar chart for lead vs contact ratio */}\r\n      <div className=\"charts\">\r\n        <div className=\"chart-container\">\r\n          <h2>Lead vs Contact Ratio</h2>\r\n          <Bar data={leadContactChartData} options={chartOptions} />\r\n        </div>\r\n\r\n        {/* Bar chart for task status */}\r\n        <div className=\"chart-container\">\r\n          <h2>Task Status Distribution</h2>\r\n          <Bar data={taskStatusChartData} options={chartOptions} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}