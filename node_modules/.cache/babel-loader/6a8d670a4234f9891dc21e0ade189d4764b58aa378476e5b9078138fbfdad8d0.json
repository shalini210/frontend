{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\crm-project\\\\frontend\\\\src\\\\components\\\\LeadGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { fetchLeads } from '../api';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\n\n// Register necessary components for Chart.js v3+\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\nconst LeadGraph = () => {\n  _s();\n  const [graphData, setGraphData] = useState({\n    labels: [],\n    // Initialize as empty array\n    datasets: [] // Initialize as empty array\n  });\n  useEffect(() => {\n    const getLeadData = async () => {\n      try {\n        const response = await fetchLeads();\n        const leads = response.data;\n        if (leads && leads.length > 0) {\n          // Count leads by status\n          const statusCounts = leads.reduce((acc, lead) => {\n            acc[lead.status] = (acc[lead.status] || 0) + 1;\n            return acc;\n          }, {});\n          setGraphData({\n            labels: Object.keys(statusCounts),\n            // Labels from status types\n            datasets: [{\n              label: 'Leads by Status',\n              data: Object.values(statusCounts),\n              // Dataset values for each status\n              backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']\n            }]\n          });\n        } else {\n          // In case there is no lead data\n          setGraphData({\n            labels: ['No Data'],\n            datasets: [{\n              label: 'Leads by Status',\n              data: [0],\n              // No data\n              backgroundColor: ['#FF6384']\n            }]\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching leads:', error);\n        // Handle error gracefully\n        setGraphData({\n          labels: ['Error'],\n          datasets: [{\n            label: 'Leads by Status',\n            data: [0],\n            // Error state\n            backgroundColor: ['#FF0000']\n          }]\n        });\n      }\n    };\n    getLeadData();\n  }, []); // Empty array ensures this runs only once, when the component mounts\n\n  // Check if the data is available before rendering the chart\n  if (!graphData.labels.length || !graphData.datasets.length) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lead Status Distribution\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      data: graphData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(LeadGraph, \"U9y0E3Em8+wcc08FISSNegX733w=\");\n_c = LeadGraph;\nexport default LeadGraph;\nvar _c;\n$RefreshReg$(_c, \"LeadGraph\");","map":{"version":3,"names":["React","useEffect","useState","Bar","fetchLeads","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","LeadGraph","_s","graphData","setGraphData","labels","datasets","getLeadData","response","leads","data","length","statusCounts","reduce","acc","lead","status","Object","keys","label","values","backgroundColor","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/crm-project/frontend/src/components/LeadGraph.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { fetchLeads } from '../api';\r\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// Register necessary components for Chart.js v3+\r\nChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip, Legend);\r\n\r\nconst LeadGraph = () => {\r\n  const [graphData, setGraphData] = useState({\r\n    labels: [], // Initialize as empty array\r\n    datasets: [] // Initialize as empty array\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getLeadData = async () => {\r\n      try {\r\n        const response = await fetchLeads();\r\n        const leads = response.data;\r\n\r\n        if (leads && leads.length > 0) {\r\n          // Count leads by status\r\n          const statusCounts = leads.reduce((acc, lead) => {\r\n            acc[lead.status] = (acc[lead.status] || 0) + 1;\r\n            return acc;\r\n          }, {});\r\n\r\n          setGraphData({\r\n            labels: Object.keys(statusCounts), // Labels from status types\r\n            datasets: [\r\n              {\r\n                label: 'Leads by Status',\r\n                data: Object.values(statusCounts), // Dataset values for each status\r\n                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],\r\n              },\r\n            ],\r\n          });\r\n        } else {\r\n          // In case there is no lead data\r\n          setGraphData({\r\n            labels: ['No Data'],\r\n            datasets: [\r\n              {\r\n                label: 'Leads by Status',\r\n                data: [0], // No data\r\n                backgroundColor: ['#FF6384'],\r\n              },\r\n            ],\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching leads:', error);\r\n        // Handle error gracefully\r\n        setGraphData({\r\n          labels: ['Error'],\r\n          datasets: [\r\n            {\r\n              label: 'Leads by Status',\r\n              data: [0], // Error state\r\n              backgroundColor: ['#FF0000'],\r\n            },\r\n          ],\r\n        });\r\n      }\r\n    };\r\n\r\n    getLeadData();\r\n  }, []); // Empty array ensures this runs only once, when the component mounts\r\n\r\n  // Check if the data is available before rendering the chart\r\n  if (!graphData.labels.length || !graphData.datasets.length) {\r\n    return <p>Loading...</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Lead Status Distribution</h2>\r\n      <Bar data={graphData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LeadGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}